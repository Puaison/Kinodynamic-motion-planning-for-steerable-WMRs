import sys
import os
import pickle

# Get the directory containing the current file
project_folder = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print("Current folder:", project_folder)

sys.path.append(project_folder)

from World.occupancyGridMap import OccupancyGridMap
from Utils.utils import * 
from Utils.constants import *

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.animation import FuncAnimation
import math
from matplotlib.patches import Rectangle, Circle
from matplotlib.lines import Line2D

# RESOLUTION = 1
# WIDTH_ROBOT_FIGURE = 0.741
# HEIGHT_ROBOT_FIGURE = 0.590
# WIDTH_WHEELS = 0.003
# HEIGHT_WHEELS = 0.18
# JOINT_POSITION_DISPLACMENT_X = 0.024
# JOINT_POSITION_DISPLACMENT_Y = 0.019
# WHEELS_AX_OFFSET = 0.045

# WIDTH_ROBOT_FIGURE = 5 / RESOLUTION
# HEIGHT_ROBOT_FIGURE = 5 / RESOLUTION
# WIDTH_WHEELS = 2 / RESOLUTION
# HEIGHT_WHEELS = 0.5 / RESOLUTION
# JOINT_POSITION_DISPLACMENT_X = 1 / RESOLUTION
# JOINT_POSITION_DISPLACMENT_Y = 1 / RESOLUTION
# WHEELS_AX_OFFSET = 1 / RESOLUTION
    
def initMap():
    # Example usage with visualization:
    heigth = MAP_HEIGHT
    width = MAP_WIDTH
    inflate = INFLATE  # Set to True to inflate obstacles
    inflation_radius = INFLATION_RADIUS
    obstacle_probability = (
        OBSTACLE_PROBABILITY  # Probability of each cell being an obstacle (before inflating)
    )

    grid_map = OccupancyGridMap(
        width, heigth, OBSTACLE_POSITION, inflate, inflation_radius, obstacle_probability, resolution = RESOLUTION, seed = SEED
    )

    return grid_map


def update(frame, trajectory, robot_figure, wheels, centers_rotation):
    
    # Frame is the number of the current frame
    #lascio la virgola a sinistra cosi scarto v_d
    x, y, th, phi_1, v_1, om, phi, v_s, v_d = trajectory[frame%len(trajectory)] # THETA IN RADIANTS AND PHI IN RADIANTS
    
    # print("real values",x,y)
    x /= RESOLUTION
    y /= RESOLUTION

    x
    y
    # print("grid values",x,y)
    # print()   
     
    # print("th:",th)
    # print("phi_1:",phi_1)
    R = np.array([[np.cos(th), -np.sin(th)],
                                 [np.sin(th), np.cos(th)]])
    
    
    
    dis = np.array([0, -WHEELS_AX_OFFSET])
       
    robot_figure.set_xy((x - WIDTH_ROBOT_FIGURE/2, y - HEIGHT_ROBOT_FIGURE/2)) 
    robot_figure.set_angle((th)*180/math.pi)  # REQUIRES THE ANGLE IN DEGREES

    
    xy = np.array([x,y]) 
    
    P_1 = np.array([+ JOINT_POSITION_DISPLACMENT_X  , + JOINT_POSITION_DISPLACMENT_Y]) # IN ROBOT FRAME
    xy_1 = xy + R@P_1 # IN ABSOLUTE FRAME

    Rphi_1 = np.array([[np.cos(th + phi_1), -np.sin(th + phi_1)],
                                 [np.sin(th + phi_1), np.cos(th + phi_1)]])
    
    
    Ow1 = xy_1 + Rphi_1@dis

    wheels[0].set_xy(( Ow1[0] - WIDTH_WHEELS/2 , Ow1[1] - HEIGHT_WHEELS/2 ))
    wheels[0].set_angle((th+phi_1)*180/math.pi)

    
    
    #DARIO
    # wheels[0].set_xy(( (xy_1[0] - WIDTH_WHEELS/2) + WHEELS_AX_OFFSET*np.cos(th+phi_1) , (xy_1[1] - HEIGHT_WHEELS/2) + WHEELS_AX_OFFSET*np.sin(th+phi_1) ))
    # wheels[0].set_angle((th + phi_1)*180/math.pi + 90 )
    
    
    centers_rotation[0].center = ( xy_1[0]  , xy_1[1] )

    
    P_2 = np.array([- JOINT_POSITION_DISPLACMENT_X , + JOINT_POSITION_DISPLACMENT_Y ])
    xy_2 = xy + R@P_2
    
    #phi_2 = np.arctan2(v_1 * np.sin(phi_1) + om * (P_2[0] - P_1[0] ), v_1 * np.cos(phi_1) + om * (P_1[1] - P_2[1] ))  
    phi_2 = phi[1]
    
    Rphi_2 = np.array([[np.cos(th + phi_2), -np.sin(th + phi_2)],
                                 [np.sin(th + phi_2), np.cos(th + phi_2)]])
    Ow2 = xy_2 + Rphi_2@dis

    wheels[1].set_xy((Ow2[0] - WIDTH_WHEELS/2 , Ow2[1] -  HEIGHT_WHEELS/2 ))
    wheels[1].set_angle((th+phi_2)*180/math.pi)
    
    #DARIO
    # wheels[1].set_xy(((xy_2[0] - WIDTH_WHEELS/2) + WHEELS_AX_OFFSET*np.cos(th +phi_2) , (xy_2[1] -  HEIGHT_WHEELS/2 ) + WHEELS_AX_OFFSET*np.sin(th +phi_2)))
    # wheels[1].set_angle((th +phi_2)*180/math.pi + 90)
    
    centers_rotation[1].center = ( xy_2[0]  , xy_2[1] )

    
    P_3 = np.array([- JOINT_POSITION_DISPLACMENT_X , - JOINT_POSITION_DISPLACMENT_Y ])
    xy_3 = xy + R@P_3  
    
    # phi_3 = np.arctan2(v_1 * np.sin(phi_1) + om * (P_3[0] - P_1[0]), v_1 * np.cos(phi_1) + om * (P_1[1] - P_3[1]))  
    phi_3 = phi[2]

    Rphi_3 = np.array([[np.cos(th + phi_3), -np.sin(th + phi_3)],
                                 [np.sin(th + phi_3), np.cos(th + phi_3)]])
    Ow3 = xy_3 + Rphi_3@dis

    wheels[2].set_xy((Ow3[0] - WIDTH_WHEELS/2, Ow3[1] - HEIGHT_WHEELS/2 ))
    wheels[2].set_angle((th+phi_3)*180/math.pi)

    #DARIO
    # wheels[2].set_xy(((xy_3[0] - WIDTH_WHEELS/2) + WHEELS_AX_OFFSET*np.cos(th +phi_3), (xy_3[1] - HEIGHT_WHEELS/2 ) + WHEELS_AX_OFFSET*np.sin(th +phi_3)))
    # wheels[2].set_angle((th +phi_3)*180/math.pi + 90)
    
    centers_rotation[2].center = ( xy_3[0]  , xy_3[1] )
    
    P_4 = np.array([+ JOINT_POSITION_DISPLACMENT_X, - JOINT_POSITION_DISPLACMENT_Y])
    xy_4 = xy + R@P_4  
    
    # phi_4 = np.arctan2(v_1 * np.sin(phi_1) + om * (P_4[0] - P_1[0] ), v_1 * np.cos(phi_1) + om * (P_1[1] - P_4[1] ))  
    phi_4 = phi[3]

    Rphi_4 = np.array([[np.cos(th + phi_4), -np.sin(th + phi_4)],
                                 [np.sin(th + phi_4), np.cos(th + phi_4)]])
    Ow4 = xy_4 + Rphi_4@dis

    wheels[3].set_xy((Ow4[0] - WIDTH_WHEELS/2, Ow4[1] - HEIGHT_WHEELS/2 ))
    wheels[3].set_angle((th+phi_4)*180/math.pi)

    #DARIO
    # wheels[3].set_xy(((xy_4[0] - WIDTH_WHEELS/2) + WHEELS_AX_OFFSET*np.cos(th +phi_4), (xy_4[1] - HEIGHT_WHEELS/2 ) + WHEELS_AX_OFFSET*np.sin(th +phi_4)))
    # wheels[3].set_angle((th +phi_4)*180/math.pi + 90)
    centers_rotation[3].center = ( xy_4[0]  , xy_4[1] )

    robot_size = np.array([WIDTH_ROBOT_FIGURE/2, 0])
    pos_arrow = xy + R@robot_size
    
    arrow.set_data(x = pos_arrow[0], y = pos_arrow[1], dx = ARROW_LENGTH*np.cos((th)), dy = ARROW_LENGTH*np.sin((th)))


    phis = [phi_1, phi_2, phi_3, phi_4]    
    points = [Ow1, Ow2, Ow3, Ow4]    

    m1,b1 = compute_line(Ow1[0], Ow1[1], th+phi_1)
    m2,b2 = compute_line(Ow2[0], Ow2[1], th+phi_2)
    m3,b3 = compute_line(Ow3[0], Ow3[1], th+phi_3)
    m4,b4 = compute_line(Ow4[0], Ow4[1], th+phi_4)

    x = np.linspace(0, 100, 400)
    y1 = m1*x + b1
    y2 = m2*x + b2
    y3 = m3*x + b3
    y4 = m4*x + b4

    # line1.set_data(x,y1)
    # line2.set_data(x,y2)
    # line3.set_data(x,y3)
    # line4.set_data(x,y4)


    # print(f'v_1: {v_1}, om: {om}, phi_1:{phi_1}')
    if np.abs(om) > 1e-4:
        ratio = v_1/om
        # ratio_arr = np.array([0, ratio]) if om > 0 else np.array([ratio, 0])
        ratio_arr = np.array([0, ratio])
        R_icr = np.array([[np.cos(th+phi_1), -np.sin(th+phi_1)],
                                 [np.sin(th+phi_1), np.cos(th+phi_1)]])

        icr_coordinates = Ow1 + R_icr@ratio_arr
        icr_point.set_data(icr_coordinates[0], icr_coordinates[1])

        line1_icr.set_data([Ow1[0],icr_coordinates[0]], [Ow1[1],icr_coordinates[1]])
        line2_icr.set_data([Ow2[0],icr_coordinates[0]], [Ow2[1],icr_coordinates[1]])
        line3_icr.set_data([Ow3[0],icr_coordinates[0]], [Ow3[1],icr_coordinates[1]])
        line4_icr.set_data([Ow4[0],icr_coordinates[0]], [Ow4[1],icr_coordinates[1]])
        
        dist_1 = np.linalg.norm(icr_coordinates-xy_1)
        dist_2 = np.linalg.norm(icr_coordinates-xy_2)
        dist_3 = np.linalg.norm(icr_coordinates-xy_3)
        dist_4 = np.linalg.norm(icr_coordinates-xy_4)
        
        if (dist_1) < 0.05:
            print("ICR is close to axis of wheel 1:",dist_1)
            
        elif (dist_2) < 0.05:
            print("ICR is close to axis of wheel 1:",dist_2)    
        
        elif (dist_3) < 0.05:
            print("ICR is close to axis of wheel 1:",dist_3)                
        
        elif (dist_4) < 0.05:
            print("ICR is close to axis of wheel 1:",dist_4)
            
            


    else:
        icr_point.set_data([], [])
        line1_icr.set_data([], [])
        line2_icr.set_data([], [])
        line3_icr.set_data([], [])
        line4_icr.set_data([], [])

    



    # compute_ICR(phis, points)
    # if frame < 10:
    #     plt.savefig(f"frame_{frame}.png")
    return robot_figure, wheel_1


grid_map = initMap()
occupancy_grid = grid_map.occupancy_grid

robot_position = (MAP_WIDTH/2,MAP_HEIGHT/2)

robot_orientation = 0  # Random orientation in rad

# robot_trajectory = [(50,50,0), (50,51,0), (50,52,0), (50,53,0), (50,53,90), (51,53,90), (52,53,90), (53,53,90), (53,53,180), (53,52,180), (53,51,180), (53,50,180), (52,50,270), (51,50,270), (50,50,270)]

# 5000 iterazioni, tau_step 1, freq 1, 
# robot_trajectory = [[1, 1, 1, 1, 1, 1], [6.401083353835739, 7.307559492477463, 1.199900755254312, 2.8591290638452493, 2.0920048138151577, 1.131201489811508], [9.186836676367015, 9.019781861237561, 0.5485877996876128, 2.983617352610044, 0.7674099735996307, 0.6969963488788823], [8.191330716156731, 9.11448076928724, 2.8238298768996586, 0.6791873622866056, 2.5512356426934035, 0.7366975322145017], [14.040089614612864, 14.225634736457298, 1.8916223061657664, 2.1201279426822515, 0.6653186695843128, 2.538481061285709], [12.48507720981427, 19.106582332349053, 2.753912031445532, 2.4161202754427977, 1.625710039005636, 1.5847825068655126], [11.353950379636625, 25.553993361946493, 2.8796522831912426, 1.2328282012497804, 1.5837790678711359, 1.638235622441211], [12.341307280015476, 25.395480424700768, 1.6808239242596517, 2.4693437985334055, 0.8767782197210667, 0.8033770244163689], [17.235586874950464, 33.21796130840363, 1.0988663628972013, 1.9129935446350539, 2.6704248352203455, 1.2781434057077932], [18.433340370418186, 38.45268095238573, 3.1191740009581697, 2.812037992105871, 1.2133129425580647, 2.1640420026567906], [26.144397834970466, 43.49671711854662, 1.0499181587650657, 1.8818843945461357, 1.955542844332363, 0.51704932933112], [33.92583870769181, 42.2817897365079, 1.0191873497687682, 1.5180603672696171, 2.530333703486902, 1.5496385931401746], [38.86748199152852, 43.807191386782165, 1.9051424782452029, 1.6576234924660476, 1.6980254377504234, 0.5824054590455345], [43.148308246517374, 52.0727628943674, 1.420955052171249, 2.5103253935149277, 1.033969034671006, 1.1658681560904813], [45.104407344828935, 58.32655155868273, 0.9898991962529148, 1.8520681776911514, 1.6088855961935478, 0.5338821102866987], [44.468047941918854, 56.81591478920783, 2.9995122678290773, 2.422674395459141, 1.2452867748782617, 1.5953616187512172], [49.128024343919584, 57.81639097819685, 1.7317359602317304, 1.6542300709350926, 1.6968374704899083, 1.7346003312576186], [56.69426423804629, 60.79949674291625, 1.6791171021565154, 2.7921001285449294, 1.0668204095034168, 2.6348393295115105], [55.498690886248056, 67.87050011535777, 1.3530031468053079, 1.6054230982877942, 0.9124050341110302, 0.9863338928675404], [59.28176171720572, 68.680911903553, 0.09283477926369231, 0.650020778463166, 0.7634107165077371, 0.9046695983824542], [61.68927067995227, 70.1587497322515, 0.1097257442366369, 0.6444426503331497, 0.5660754530318569, 2.411874609774518]]
# robot_trajectory = [[1, 1, 1, 1, 1, 1], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [3.8236506217861796, 0.01662803818248937, 0.5958662830192756, 2.018106876836918, 1.1166058378388217, -0.08332481330300734], [6.24162621813363, 0.6868144442992229, 0.9687768325080756, 2.752912940528752, 1.2593696614631253, -0.573031244312197], [7.537983160324535, 2.269177430628176, 1.5819414002920253, 3.204418191075502, 1.4282914708729106, -0.5827755612664546], [7.631959549525129, 4.179531953506095, 2.012226006435636, 3.3726226284771683, 1.6233712660681778, -0.22621403240466587], [6.962401587358767, 5.968994119924638, 1.9501529392423038, 3.2575262527337503, 1.844609047048927, 0.3829970740342832], [6.372189946478993, 7.302085594126506, 1.1999007552543115, 2.8591290638452485, 2.0920048138151577, 1.1312014898115068], [6.401083353835739, 7.307559492477463, 1.199900755254312, 2.8591290638452493, 2.0920048138151577, 1.131201489811508], [7.28873623608665, 8.084345253504056, 0.6800757669345817, 2.984555315350687, 1.6768191667492833, 0.06023824215153639], [8.669598287787782, 8.588075917616088, 0.7727468265558862, 3.0260514116056187, 1.2352875533441081, -0.09069267232237602], [9.18805287213634, 9.020359439279416, 0.5485877996876094, 2.983617352610044, 0.767409973599632, 0.6969963488788848], [8.191330716156731, 9.11448076928724, 2.8238298768996586, 0.6791873622866056, 2.5512356426934035, 0.7366975322145017], [8.840107582718671, 8.540949091757973, 2.040366000450555, 1.678839364673419, 2.1589904829993976, 0.7999398376657545], [9.196944661085428, 8.600977464643984, 1.2634777146284693, 2.446982694781232, 1.5643819266348058, 0.744599603936049], [9.195101823165055, 9.023707024787408, 0.5485877996876096, 2.983617352610044, 0.7674099735996286, 0.6969963488788862], [8.191330716156731, 9.11448076928724, 2.8238298768996586, 0.6791873622866056, 2.5512356426934035, 0.7366975322145017], [21.21123432306227, 12.574486508974857, 5.5339144111384515, -5.190083606599788, 7.238941247678562, -0.11963897032465465], [28.76388032167852, 7.795556669610091, 1.891622306165806, 2.1201279426822257, 0.6653186695843418, 2.538481061285677], [14.040089614612864, 14.225634736457298, 1.8916223061657664, 2.1201279426822515, 0.6653186695843128, 2.538481061285709], [14.154115838992404, 12.453289662267013, 0.2317322888459432, 2.006078999414546, 0.2731553226523578, 0.8700211278186796], [13.217651597757271, 12.160633692612956, -0.019884874980217793, 1.9351866232504897, 0.027338338037437154, -0.28404402912247395], [12.078366138205059, 12.97394276318382, 0.6403141884239834, 1.9074508141900832, -0.07213228426044908, -0.9595907100629035], [11.273400826406924, 14.494605204790178, 1.7517491533203984, 1.9228715722333263, -0.02525654424130093, -1.1924952155277604], [11.051177255133837, 16.304494675196246, 2.8897159944960302, 1.981448897380219, 0.16796555809488162, -1.018633846042196], [11.393205351782829, 17.971343090951628, 3.665386987263034, 2.083182789630761, 0.5075340227480987, -0.47388290213136175], [12.035891486303237, 19.05411355922309, 3.7258107074587143, 2.228073248984953, 0.99344884971835, 0.40588131567959096], [12.492346579122952, 19.1083733096263, 2.7539120314455294, 2.416120275442794, 1.6257100390056358, 1.5847825068655106], [12.48507720981427, 19.106582332349053, 2.753912031445532, 2.4161202754427977, 1.625710039005636, 1.5847825068655126], [9.773686360019346, 20.916656774514546, 2.8796522831912426, 1.2328282012497747, 1.5837790678711399, 1.6382356224412158], [12.341307280015476, 25.395480424700768, 1.6808239242596517, 2.4693437985334055, 0.8767782197210667, 0.8033770244163689], [10.896921324368277, 23.27104684345445, 1.2086939642713141, 1.8674853751876785, 0.7992487754109943, 0.1275801018313325], [9.543219544812144, 21.21183295987239, 1.415379056120736, 1.4239359480280003, 0.799864498701622, -0.517362827324952], [8.655565391378897, 20.536289987368537, 2.159354450576571, 1.1386955170543709, 0.87862538959295, -0.9101102514472958], [8.589422525699568, 21.774185929390097, 3.0777538868022845, 1.0117640822667902, 1.0355314480849782, -0.8293206589305101], [9.525558997963333, 24.212352160457883, 3.586369592356152, 1.043141643665258, 1.2705826741777067, -0.05365253816940618], [11.315251423876422, 25.44043000720669, 2.879652283191261, 1.2328282012497749, 1.5837790678711352, 1.638235622441205], [12.341307280015476, 25.395480424700768, 1.6808239242596517, 2.4693437985334055, 0.8767782197210667, 0.8033770244163689], [13.404823067493625, 28.118667829553665, 1.4188035863744815, 3.1632719869567856, 0.7388525037597926, -0.12928213260770183], [15.422419144271096, 31.720639218904974, 1.6011618931534852, 2.9778219023240013, 1.336734708926219, -0.04726240066706164], [17.209775794823173, 33.191417001982806, 1.0988663628971995, 1.9129935446350528, 2.6704248352203455, 1.2781434057077943], [17.235586874950464, 33.21796130840363, 1.0988663628972013, 1.9129935446350539, 2.6704248352203455, 1.2781434057077932], [7.5602789193682085, 32.53607052432188, 3.119174000958173, 2.8120379921058607, 1.2133129425580624, 2.1640420026567875], [18.433340370418186, 38.45268095238573, 3.1191740009581697, 2.812037992105871, 1.2133129425580647, 2.1640420026567906], [18.803799911121047, 40.77938831507535, 1.6309886867155903, 2.706593952321894, 1.4637118513932337, 0.9011023268092297], [20.1487822284678, 42.051354749531015, 1.1467410159662037, 2.560856572673932, 1.663134295988248, 0.14884764508218762], [22.187251487839717, 42.93372532112686, 1.1777032063541437, 2.374825853161985, 1.8115802763431075, -0.13663646605364105], [24.41878900463838, 43.544545100658425, 1.2790618990528497, 2.148501793786053, 1.9090497924578123, 0.0007355698724380577], [26.149872727255932, 43.50775868544238, 1.0499181587650668, 1.8818843945461354, 1.9555428443323621, 0.5170493293311194], [26.144397834970466, 43.49671711854662, 1.0499181587650657, 1.8818843945461357, 1.955542844332363, 0.51704932933112], [21.74211007946425, 42.59337466425962, 1.0191873497687725, 1.5180603672696282, 2.53033370348691, 1.5496385931401655], [33.92583870769181, 42.2817897365079, 1.0191873497687682, 1.5180603672696171, 2.530333703486902, 1.5496385931401746], [35.229676517382565, 40.81784876698877, 0.36133453194178733, 1.9546485257242807, 1.590264470818199, -0.09553585418045962], [36.43819412830284, 41.11164001304271, 0.918437019704353, 2.123438432741907, 1.1381900156392186, -0.8652441862250904], [37.65102648154259, 42.683494155929345, 1.7699452023389775, 2.024430088322496, 1.1741103379499604, -0.6693194121107492], [38.86677469506398, 43.78929929120122, 1.9051424782452044, 1.6576234924660482, 1.6980254377504245, 0.5824054590455324], [38.86748199152852, 43.807191386782165, 1.9051424782452029, 1.6576234924660476, 1.6980254377504234, 0.5824054590455345], [39.8628907315714, 44.25343455692206, 1.4116763986916554, 2.597035081648732, 1.8132195231837167, 0.3625753424771221], [40.603537407553034, 45.788234310422084, 1.2294819897988967, 3.2175288285616017, 1.8380655475717314, -0.005725363615104229], [41.397301650835, 47.9429807979126, 1.4037922851079243, 3.5191047332046557, 1.7725635109144675, -0.316021547265512], [42.302896267652066, 50.11046226818156, 1.7733652061941036, 3.5017627955778945, 1.616713413211925, -0.3618380965084689], [43.0793828087332, 51.668515372761085, 1.9704835626671675, 3.1655030156813178, 1.3705152544641037, 0.06330010062165764], [43.135687138922556, 52.10367547051401, 1.4209550521712164, 2.510325393514926, 1.033969034671004, 1.1658681560905], [43.148308246517374, 52.0727628943674, 1.420955052171249, 2.5103253935149277, 1.033969034671006, 1.1658681560904813], [42.92822911850517, 52.905802674774485, 0.6058273256979515, 2.8060906942210706, 0.16083508466587415, 0.48852440722185153], [42.672444105953524, 54.039939616974905, 0.38799725024157594, 2.9396660602565046, -0.3247175145690355, -0.021092379188868082], [42.72801884835495, 55.460291290157976, 0.5768335630807286, 2.91105149162123, -0.42268876303372305, -0.3171736026147104], [43.24444030913179, 56.96843602793629, 0.9358964009670486, 2.7202469883152465, -0.1330786607281884, -0.3539106625287083], [44.14483929488467, 58.14586157266526, 1.1829373001252081, 2.367252550338554, 0.5441127923475683, -0.08549495840389465], [45.09721297464103, 58.31741371976257, 0.9898991962529119, 1.8520681776911527, 1.6088855961935469, 0.5338821102866975], [44.468047941918854, 56.81591478920783, 2.9995122678290773, 2.422674395459141, 1.2452867748782617, 1.5953616187512172], [44.696765158404226, 58.12860246527202, 1.7224782393788094, 2.374151887130197, 0.8189891909976388, 0.9748988714226432], [45.09579128159593, 58.315607974200304, 0.9898991962529141, 1.8520681776911514, 1.6088855961935464, 0.5338821102867006], [44.468047941918854, 56.81591478920783, 2.9995122678290773, 2.422674395459141, 1.2452867748782617, 1.5953616187512172], [39.487677878850945, 56.521321819297256, 1.7317359602317284, 1.654230070935093, 1.6968374704899056, 1.7346003312576155], [49.128024343919584, 57.81639097819685, 1.7317359602317304, 1.6542300709350926, 1.6968374704899083, 1.7346003312576186], [48.41842884067326, 59.13799113749804, 0.6603361081271464, 2.049797936043456, 1.4343834544569316, 0.4581587125013007], [47.361431526287646, 62.56254462845861, 0.702531161820911, 2.367694134573311, 1.229413298007018, -0.47962078603036284], [47.456628723976074, 65.77304919669842, 1.4807529181622219, 2.607918666524657, 1.0819270011401674, -1.0009259984850756], [49.35657337683526, 67.23289523444333, 2.53962100814798, 2.7704715318974946, 0.9919245638563797, -1.0279447590105417], [52.72139847363479, 66.34769536395501, 3.3459428969227907, 2.8553527306918234, 0.959405986155655, -0.48286490175446484], [56.07344047460667, 63.62711402096075, 3.288713883778963, 2.8625622629076437, 0.9843712680379932, 0.7121257391354512], [56.65186273723477, 60.84669703808321, 1.6791171021565097, 2.792100128544955, 1.0668204095033944, 2.634839329511503], [56.69426423804629, 60.79949674291625, 1.6791171021565154, 2.7921001285449294, 1.0668204095034168, 2.6348393295115105], [54.782599062025255, 60.38748797139206, -0.317687925234869, 2.80016785188309, 0.9346987343396673, 1.3931137524478334], [52.81186212367796, 61.23890670901139, -1.1817861490308752, 2.7635491889011643, 0.8348112743872611, 0.3754154142593278], [51.44732275593572, 62.840685343491074, -1.155173883922395, 2.682244139599152, 0.7671580296461982, -0.382317533422566], [51.07324150424045, 64.7249663577189, -0.5157855962317605, 2.5562527039770537, 0.7317390001164785, -0.8441469389664079], [51.75994719028614, 66.47912956773874, 0.42250609608725653, 2.385574882034869, 0.728554185798102, -0.9741346507407574], [53.230913975760394, 67.75581936073576, 1.3098904234494433, 2.1702106737725977, 0.7576035866910689, -0.7363425171141744], [54.82983842608587, 68.28297193302159, 1.7606184646381475, 1.91016007919024, 0.818887202795379, -0.09483238645521863], [55.48771657416181, 67.8738425280195, 1.3530031468052761, 1.605423098287796, 0.9124050341110324, 0.9863338928675499], [55.498690886248056, 67.87050011535777, 1.3530031468053079, 1.6054230982877942, 0.9124050341110302, 0.9863338928675404], [54.30399374130883, 66.63932464014525, 0.3519608512995771, 1.7558879531773695, 0.2396418672803401, 0.9573234417063368], [54.071015622560694, 67.01891155893743, -0.4685182675329551, 1.829241338104758, -0.2462244775131277, 0.6489365833219025], [54.75975616643779, 68.27951350732151, -0.9002449338713352, 1.82548325306996, -0.5451940002693731, 0.2035475805187913], [56.134080411528885, 69.60801453175085, -0.877404134699163, 1.7446136980729754, -0.6572667009883962, -0.23646930389844334], [57.804508453654954, 70.32817180578898, -0.4765551198045918, 1.586632673113804, -0.582442579670197, -0.5287398071252478], [59.27100510094675, 70.12085734635357, 0.08336859821967141, 1.351540178192446, -0.32072163631477535, -0.5308896663570686], [59.965769528922394, 69.24429972996049, 0.44105924397636614, 1.0393362133089017, 0.12789612907786863, -0.10054461878935189], [59.29602493556493, 68.75432580896776, 0.09283477926367811, 0.6500207784631704, 0.763410716507735, 0.9046695983824558], [59.28176171720572, 68.680911903553, 0.09283477926369231, 0.650020778463166, 0.7634107165077371, 0.9046695983824542], [57.94462689484572, 49.41099515038669, 5.604875969129773, 10.162957154917326, 13.679114033635232, -0.8418042757689512], [43.78984852620022, 38.63857025514601, 0.10972574423661374, 0.6444426503331151, 0.5660754530318695, 2.411874609774582]]

# 500 iterazioni, tau_step 1, freq 10
#robot_trajectory = [[1, 1, 1, 1, 1, 1], [7.644497713676286, 6.699860921677947, 1.3399233797150942, 2.7810603878622633, 2.0004779142969387, 1.3136848701221353], [14.450631885625995, 12.348435955042177, 1.0614061316662298, 2.3782071417275104, 1.7416764245384497, 0.9025204579914804], [20.502275226978508, 18.54147552787844, 0.22280802924287646, 2.4464813702919797, 2.8709317626797173, 1.0753210176107229], [19.490336178066652, 24.967742091138224, 2.1974692276793326, 0.9581229309943882, 1.2638080119281554, 0.8381262796860063], [23.980632158258878, 32.93895703297594, 1.364467451893331, 2.37186022359543, 1.121389556683357, 2.8678733939396275], [30.396812602570293, 37.861138355349, 1.286946779176027, 2.6354763148924945, 2.678959017732317, 1.0738309933105685], [34.61368443882449, 44.578400031953976, 0.6654411630237759, 2.255959996464278, 2.9753909417343296, 1.63500727001035], [38.842239806929115, 51.263633124425525, 1.61088732846563, 2.621739083961152, 1.9328249418040673, 0.7686967269894833], [38.75476419589519, 49.50245696265926, 2.7276169902584617, 0.6504670600356297, 1.0056027471359494, 0.9116743355111288], [38.94433428538737, 52.25840783131565, 2.5361666864080163, 2.8902413811008607, 2.039596915511763, 2.108043874225804]]
# robot_trajectory = [[1, 1, 1, 1, 1, 1], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [3.680262640648508, 0.5615709730593341, 0.6187898036918471, 2.0089816625350485, 1.279358194876443, -0.1329693420123996], [6.033824481103705, 1.856538913048655, 1.0600302015276937, 2.691578532588799, 1.5190850837443581, -0.6482132365334831], [7.497100123126891, 3.795495097180891, 1.7159318907526753, 3.0477906101612504, 1.7191806666037448, -0.5656039730361523], [7.938425942876234, 5.581300085914064, 1.9985778580848281, 3.0776178952524047, 1.8796449434546036, 0.09498615900669045], [7.644497431120843, 6.699860729532222, 1.3399233797150913, 2.7810603878622597, 2.0004779142969342, 1.3136848701221433], [7.644497713676286, 6.699860921677947, 1.3399233797150942, 2.7810603878622633, 2.0004779142969387, 1.3136848701221353], [8.628884901461678, 7.921169699891556, 0.745617083163306, 2.9954978913188426, 2.2385275325359197, 0.017361676671112894], [10.896482413631967, 9.665248915244993, 1.028748642116258, 2.999834851448577, 2.2747438236558324, -0.449607364010077], [13.190591944068359, 11.418974051643422, 1.3852134731723122, 2.7940712682514666, 2.109126787656676, -0.13772139065782396], [14.450631747950732, 12.348436322721946, 1.061406131666222, 2.378207141727511, 1.7416764245384508, 0.9025204579914821], [14.450631885625995, 12.348435955042177, 1.0614061316662298, 2.3782071417275104, 1.7416764245384497, 0.9025204579914804], [16.13572348515212, 14.116212260636564, 0.7883197368578019, 3.373283916261328, 0.8086289640789934, -0.09221797691798597], [18.600566142859343, 17.06195940131605, 0.824070608047048, 3.396041992449484, 1.185047410126083, 0.17835802053800862], [20.502279180105802, 18.54148567306813, 0.22280802924287813, 2.4464813702919788, 2.870931762679718, 1.0753210176107226], [20.502275226978508, 18.54147552787844, 0.22280802924287646, 2.4464813702919797, 2.8709317626797173, 1.0753210176107229], [20.05937473395637, 17.22554237249562, -0.43658556300473605, 2.7986740627226636, 2.096215360642655, 0.2669058055761599], [18.767302831042215, 16.941888544782387, -0.3669243144985036, 2.9625949796146633, 1.5032080568678718, -0.37374720869122224], [17.50078704506574, 17.867688262108164, 0.23690521137715842, 2.938244120967979, 1.0919098513553687, -0.7923892939569543], [16.866517161513112, 19.865402100810492, 1.1257677200033653, 2.72562148678261, 0.8623207441051451, -0.9347717189865672], [17.14061282900784, 22.42438703881521, 1.9962791855267632, 2.3247270770585553, 0.8144407351172014, -0.7466457525455918], [18.20609116379162, 24.60250649825668, 2.4908068508595296, 1.7355608917958159, 0.9482698243915374, -0.1737626633995591], [19.4903343542052, 24.967740388098008, 2.1974692276793726, 0.9581229309943914, 1.263808011928153, 0.8381262796860004], [19.490336178066652, 24.967742091138224, 2.1974692276793326, 0.9581229309943882, 1.2638080119281554, 0.8381262796860063], [20.585159072724135, 22.8793977314666, 1.1916354062332324, 1.3893012220894427, 1.1041963951908529, 1.084105114027991], [19.639158036380795, 23.657030029787308, 0.18039144412133867, 1.7560784994433973, 0.9768891720563999, 0.8766866148760124], [17.46569265201843, 27.06816886331663, -0.46608548673764355, 2.0584547630562535, 0.8818863425247965, 0.38231110538058766], [15.137722012969185, 32.04397193774977, -0.5440585375755265, 2.2964300129280093, 0.8191879065960425, -0.2325810913077669], [13.722963793400593, 37.08962279036511, -0.016231182774638614, 2.4700042490586664, 0.7887938642701382, -0.8015496520385347], [14.019053318800605, 40.69472879312867, 0.9882527801321751, 2.579177471448223, 0.7907042155470834, -1.158154253661199], [16.28870263646264, 41.743719155798196, 2.1738092304615524, 2.623949680096681, 0.8249189604268781, -1.135954573025243], [19.994859585970588, 39.92624292902774, 3.0784137243796152, 2.604320875004039, 0.8914380989095223, -0.5685102869801504], [23.53586686968387, 36.1475670074718, 3.0736014949019683, 2.520291056170297, 0.9902616309950162, 0.7106189276245957], [23.980621123222463, 32.938974132889754, 1.3644674518937001, 2.3718602235954545, 1.1213895566833596, 2.8678733939395116], [23.980632158258878, 32.93895703297594, 1.364467451893331, 2.37186022359543, 1.121389556683357, 2.8678733939396275], [23.953794878898904, 31.930553193871198, -0.1939690218454253, 2.7210890840265938, 0.94364972620704, 0.46205324297217354], [26.243495011760505, 32.30628299647306, 0.0425665094342859, 2.9220651233718824, 1.0105367570737778, -0.7503835384511864], [28.511199824179833, 33.90336563080545, 0.9656294432500074, 2.974788341631296, 1.3220506492835704, -0.9393144844537257], [29.811698690884825, 36.08974315531021, 1.636652711242555, 2.8792587388048347, 1.878191402836417, -0.2746171291587171], [30.396808513099863, 37.861140377429884, 1.2869467791760167, 2.635476314892499, 2.678959017732319, 1.0738309933105668], [30.396812602570293, 37.861138355349, 1.286946779176027, 2.6354763148924945, 2.678959017732317, 1.0738309933105685], [31.299406535695542, 38.797594593947814, 0.3643386470952563, 2.648344638242889, 1.2685621631731072, 0.7495432178240188], [31.257240499002794, 39.50532470468818, -0.18185040288526003, 2.6474537607993462, 0.21899874236486663, 0.33438768157721804], [30.8370796485558, 40.10529802883377, -0.3009371674067458, 2.632803682561865, -0.46973124469240446, -0.09126650062688413], [30.496764593220604, 40.73846776167491, -0.022607557913374356, 2.6043944035304456, -0.7976277979987061, -0.4470502139853383], [30.55522015708189, 41.516913047976516, 0.5430833993477316, 2.562225923705088, -0.7646909175540387, -0.652594343695195], [31.162464141859335, 42.47498107742605, 1.2057115633264996, 2.5062982430857925, -0.37092060335840216, -0.6275297749535046], [32.26961608932392, 43.5204291800815, 1.6944836781699086, 2.4366113616725587, 0.38368314458820374, -0.2914873929573176], [33.59890604371429, 44.38556692181935, 1.6582373732219868, 2.3531652794653866, 1.499120326285779, 0.43590191709631554], [34.61368331415307, 44.578398199782484, 0.6654411630238131, 2.2559599964642767, 2.9753909417343243, 1.6350072700103442], [34.61368443882449, 44.578400031953976, 0.6654411630237759, 2.255959996464278, 2.9753909417343296, 1.63500727001035], [36.49987978010537, 45.787471373276276, 0.17235036703958237, 2.8333937239454627, 1.6044966442353394, -0.37921952306887363], [38.18785171529377, 47.83450482788693, 0.944554207542373, 3.086834814355337, 0.9737708784139656, -0.9554683112906466], [38.8127804508876, 49.87319751796054, 1.723733604655782, 3.0162832676939004, 1.0832136442702087, -0.4530569446171394], [38.84223432296532, 51.26363405183532, 1.6108873284656149, 2.621739083961153, 1.9328249418040686, 0.7686967269894777], [38.75476419589519, 49.50245696265926, 2.7276169902584617, 0.6504670600356297, 1.0056027471359494, 0.9116743355111288], [39.80342250646386, 49.10731503505967, 2.2987020396622277, 2.3377910033132143, 0.9685380488679474, 0.14511739881335214], [39.361038208486406, 50.11942481117959, 2.1344331793546996, 2.994881677955054, 1.2776121137573193, 0.28740750194674647], [38.84223328409969, 51.26363422752105, 1.6108873284656196, 2.6217390839611476, 1.9328249418040653, 0.7686967269894854], [38.75476419589519, 49.50245696265926, 2.7276169902584617, 0.6504670600356297, 1.0056027471359494, 0.9116743355111288], [40.558695968975464, 51.90735174561492, 2.268245204799114, 1.8207425584104207, 1.0575579161418336, 0.055215497577919936], [40.4417558715022, 54.03911377062763, 2.5167720335062973, 2.7075821440443413, 1.1414325130207952, -0.5000014555663193], [39.66913106398989, 55.420451151922826, 3.1595912798242027, 3.3109858169373894, 1.2572265377728344, -0.7292479003879101], [39.0586231236242, 55.80110607754493, 3.8583681236633427, 3.630953577089567, 1.4049399903979511, -0.6077952133531744], [38.946233794467105, 55.17768810943757, 4.250039121400549, 3.6674854245008746, 1.5845728708961455, -0.1109147709284334], [39.151750737661956, 53.81350748352388, 3.9468122058789787, 3.420581359171311, 1.7961251792674175, 0.7861220504199913], [38.94433328163874, 52.258408409786746, 2.536166686408111, 2.890241381100876, 2.0395969155117672, 2.108043874225778]]

# 10 iterazioni, tau_step 1, freq 1 (post modifiche)
#robot_trajectory = [[2, 2, 1, 1, 1, 1], [13.321133997499286, 14.997729292976903, 4.618801951939988, 2.8688538992663895, 0.2600351138143474, 0.11506863127023843], [25.377443525587744, 39.36870185415829, 3.8411114708898233, 2.4503600949655513, 0.2604433069789667, 0.2967508809301863], [37.20967586752977, 62.41649002657785, 3.891147584215742, 2.9153351069488833, 0.21601299040643002, 0.16440119104661882]]

file_path = 'optimal_trajectory.pkl'
file_path_nonlinear = 'optimal_trajectory_nonlinear.pkl'

# Open the file in binary read mode
with open(file_path, 'rb') as file:
    # Load the list from the file using pickle
    robot_trajectory = pickle.load(file)


# Open the file in binary read mode
with open(file_path_nonlinear, 'rb') as file:
    # Load the list from the file using pickle
    robot_trajectory_nonlinear = pickle.load(file)

 
# robot_trajectory = [r[:4] for r in robot_trajectory]
x_traj = [node[0] for node in robot_trajectory]
y_traj = [node[1] for node in robot_trajectory]

# plt.plot(x_traj, y_traj, marker='o')

# Define the colormap
colors = [(0,(1, 1, 1)), (1,(0, 0, 0)), (1,(0, 0, 0))]  # Black for obstacles, Green for robot cells
custom_cmap = LinearSegmentedColormap.from_list('custom_cmap', colors, N=3)

extent = [0, MAP_WIDTH, MAP_HEIGHT, 0]

# Visualizing the occupancy grid with robot cells
fig, ax = plt.subplots(figsize=(8, 8))
im = ax.imshow(occupancy_grid, cmap=custom_cmap, interpolation='nearest', extent = extent )

ax.plot(x_traj, y_traj) #add the trajectory line

#plt.colorbar(ticks=[0, 1, 2], label='Occupancy')
# plt.title('Occupancy Grid Map with Robot')
# plt.xticks([])  # Hide x ticks
# plt.yticks([])  # Hide y ticks

# x = [node[0] / RESOLUTION for node in robot_trajectory_nonlinear]
# y = [node[1] / RESOLUTION  for node in robot_trajectory_nonlinear]
  
# plt.plot(x, y)  # 'marker=o' aggiunge un marcatore a forma di cerchio su ogni punto

# Aggiunge titolo e etichette agli assi



robot_figure = Rectangle((robot_position[0] - WIDTH_ROBOT_FIGURE/2 , robot_position[1] - HEIGHT_ROBOT_FIGURE/2  ), 
                      WIDTH_ROBOT_FIGURE, HEIGHT_ROBOT_FIGURE, angle=robot_orientation, 
                      rotation_point="center",
                      color='green', fill=True, linewidth=2)


wheel_1 = Rectangle((robot_position[0] - JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2, robot_position[1] - JOINT_POSITION_DISPLACMENT_Y - HEIGHT_WHEELS/2), 
                      WIDTH_WHEELS, HEIGHT_WHEELS, angle=robot_orientation,
                      rotation_point="center", 
                      color='blue', fill=True, linewidth=2)

wheel_2 = Rectangle((robot_position[0] - JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2, robot_position[1] + JOINT_POSITION_DISPLACMENT_Y - HEIGHT_WHEELS/2), 
                      WIDTH_WHEELS, HEIGHT_WHEELS, angle=robot_orientation, 
                      rotation_point="center",
                      color='red', fill=True, linewidth=2)

wheel_3 = Rectangle((robot_position[0] + JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2, robot_position[1] - JOINT_POSITION_DISPLACMENT_Y - HEIGHT_WHEELS/2), 
                      WIDTH_WHEELS, HEIGHT_WHEELS, angle=robot_orientation, 
                      rotation_point="center",
                      color='red', fill=True, linewidth=2)

wheel_4 = Rectangle((robot_position[0] + JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2, robot_position[1] + JOINT_POSITION_DISPLACMENT_Y - HEIGHT_WHEELS/2), 
                      WIDTH_WHEELS, HEIGHT_WHEELS, angle=robot_orientation, 
                      rotation_point="center",
                      color='red', fill=True, linewidth=2)

center_rotation_1 = Circle((0,0),JOINT_RADIUS, color="orange", fill=True, )
center_rotation_2 = Circle((0,0),JOINT_RADIUS, color="orange", fill=True, )
center_rotation_3 = Circle((0,0),JOINT_RADIUS, color="orange", fill=True, )
center_rotation_4 = Circle((0,0),JOINT_RADIUS, color="orange", fill=True, )

wheels = [wheel_1, wheel_2, wheel_3, wheel_4]
centers_rotation = [center_rotation_1, center_rotation_2, center_rotation_3, center_rotation_4] 

ax.add_patch(robot_figure)
ax.add_patch(wheel_1)
ax.add_patch(wheel_2)
ax.add_patch(wheel_3)
ax.add_patch(wheel_4)
ax.add_patch(center_rotation_1)
ax.add_patch(center_rotation_2)
ax.add_patch(center_rotation_3)
ax.add_patch(center_rotation_4)

wheel_1_x = robot_position[0] - JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2
wheel_1_y = robot_position[1] - JOINT_POSITION_DISPLACMENT_Y - WIDTH_WHEELS/2
wheel_2_x = robot_position[0] - JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2
wheel_2_y = robot_position[1] - JOINT_POSITION_DISPLACMENT_Y - WIDTH_WHEELS/2
wheel_3_x = robot_position[0] - JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2
wheel_3_y = robot_position[1] - JOINT_POSITION_DISPLACMENT_Y - WIDTH_WHEELS/2
wheel_4_x = robot_position[0] - JOINT_POSITION_DISPLACMENT_X - WIDTH_WHEELS/2
wheel_4_y = robot_position[1] - JOINT_POSITION_DISPLACMENT_Y - WIDTH_WHEELS/2
wheel_1_phi = 0
wheel_2_phi = 0
wheel_3_phi = 0
wheel_4_phi = 0
th = 0


#To Show the lines passing through the wheels
# line1, = ax.plot([], [], '-r')
# line2, = ax.plot([], [], '-r')
# line3, = ax.plot([], [], '-r')
# line4, = ax.plot([], [], '-r')

#To Show the lines starting from the wheels reching the ICR
line1_icr = Line2D([], [], linestyle='--', color='grey')
line2_icr = Line2D([], [], linestyle='--', color='grey')
line3_icr = Line2D([], [], linestyle='--', color='grey')
line4_icr = Line2D([], [], linestyle='--', color='grey')

ax.add_line(line1_icr)
ax.add_line(line2_icr)
ax.add_line(line3_icr)
ax.add_line(line4_icr)

icr_point, = ax.plot(robot_position[0], robot_position[1], marker = 'o', color='black')

### ARROW
arrow = ax.arrow(robot_position[1], robot_position[0], 
          ARROW_LENGTH*np.cos((robot_orientation)), ARROW_LENGTH*np.sin((robot_orientation)),
          color='black', width=0.01 / RESOLUTION, head_width=0.1 / RESOLUTION, head_length=0.2 / RESOLUTION)

update_arguments = (robot_trajectory,  robot_figure, wheels,centers_rotation)

ani = FuncAnimation(fig, update, fargs=update_arguments,  frames=range(len(robot_trajectory)), interval=50, repeat=False)#, blit=True)

plt.gca().invert_yaxis()
plt.show()

ani.save('trajectory.gif', writer='imagemagick', dpi=100, fps=30)